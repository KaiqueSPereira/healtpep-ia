generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tabela para armazenar os dados de medicamentos da ANVISA
model AnvisaMedicamento {
  id             String  @id @unique // Número do processo
  nome           String
  principioAtivo String

  @@index([nome]) // Adiciona um índice na coluna nome para buscas mais rápidas
}

// ENUMS
enum TipoAnexo {
  Encaminhamento
  Atestado_Declaracao
  Receita_Medica
  Relatorio
  Outro
}

enum StatusMedicamento {
  Ativo
  Concluido
  Suspenso
}

enum FrequenciaTipo {
  Hora
  Dia
  Semana
  Mes
}

enum TipoMedicamento {
  Uso_Continuo
  Tratamento_Clinico
  Esporadico
}

// MODELOS

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  Authenticator  Authenticator[]
  consultas      Consultas[]
  endereco       Endereco[]
  sessions       Session[]
  condicoesSaude CondicaoSaude[] // RENAMED
  exames         Exame[]
  dadosSaude     DadosSaude?
  historicoPeso  PesoHistorico[]
  profissionais  Profissional[]
  unidades       UnidadeDeSaude[]
  medicamentos   Medicamento[]
}

model DadosSaude {
  id             String    @id @default(uuid())
  userId         String    @unique
  CNS            String?
  tipoSanguineo  String?
  sexo           String?
  dataNascimento String?
  altura         String?
  alergias       String[]  @default([])
  usuario        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PesoHistorico {
  id        String   @id @default(uuid())
  peso      String
  data      String
  userId    String
  usuario   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Consultas {
  id             String          @id @default(uuid())
  data           DateTime
  motivo         String
  tipodeexame    String?
  tipo           Consultatype
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userId         String
  profissionalId String?
  unidadeId      String?
  profissional   Profissional?   @relation(fields: [profissionalId], references: [id])
  unidade        UnidadeDeSaude? @relation(fields: [unidadeId], references: [id])
  usuario        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  Exame          Exame[]
  Anotacoes      Anotacoes[]
  condicoes      CondicaoSaude[] // RENAMED
  anexos         AnexoConsulta[]
  medicamentos   Medicamento[]
}

model Anotacoes {
  id         String    @id @default(uuid())
  consultaId String
  anotacao   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  consulta   Consultas @relation(fields: [consultaId], references: [id], onDelete: Cascade)
}

model Endereco {
  id           String          @id @default(uuid())
  CEP          String
  numero       Int
  rua          String
  bairro       String
  municipio    String
  UF           String
  nome         String
  userId       String?
  unidadeId    String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  usuario      User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  unidadeSaude UnidadeDeSaude?
}

model Profissional {
  id             String         @id @default(uuid())
  nome           String
  especialidade  String
  NumClasse      String         @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  consultas      Consultas[]
  condicoesSaude CondicaoSaude[]  @relation("ProfissionalCondicoes") // RENAMED
  unidades       UnidadeDeSaude[] @relation("ProfissionalUnidades")
  exames         Exame[]
  userId         String?
  usuario        User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  medicamentos   Medicamento[]
}

// RENAMED from Tratamento to CondicaoSaude AND fields added/updated
model CondicaoSaude {
  id             String       @id @default(uuid())
  nome           String       
  objetivo       String?      
  dataInicio     DateTime     
  observacoes    String?      
  cidCodigo      String?      
  cidDescricao   String?      

  userId         String
  profissionalId String?      
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  exames         Exame[]
  consultas      Consultas[]
  medicamentos   Medicamento[]
  
  profissional   Profissional? @relation("ProfissionalCondicoes", fields: [profissionalId], references: [id])
  usuario        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model UnidadeDeSaude {
  id            String         @id @default(uuid())
  nome          String
  tipo          String?
  telefone      String?
  enderecoId    String?        @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  consultas     Consultas[]
  endereco      Endereco?      @relation(fields: [enderecoId], references: [id])
  profissionais Profissional[] @relation("ProfissionalUnidades")
  exames        Exame[]
  userId        String?
  usuario       User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
}

enum Consultatype {
  Rotina
  Exame
  Emergencia
  Retorno
  Tratamento
}

model Exame {
  id              String           @id @default(uuid())
  nome            String
  nomeArquivo     String?
  dataExame       DateTime
  arquivoExame    Bytes?
  anotacao        String?
  analiseIA       String?
  userId          String
  profissionalId  String?
  consultaId      String?
  unidadesId      String?
  condicaoSaudeId String?          // RENAMED
  tipo            String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  condicaoSaude   CondicaoSaude?   @relation(fields: [condicaoSaudeId], references: [id]) // RENAMED
  usuario         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  profissional    Profissional?    @relation(fields: [profissionalId], references: [id], onDelete: SetNull)
  consulta        Consultas?       @relation(fields: [consultaId], references: [id], onDelete: SetNull)
  unidades        UnidadeDeSaude?  @relation(fields: [unidadesId], references: [id], onDelete: SetNull)
  resultados      ResultadoExame[]
}

model ResultadoExame {
  id         String   @id @default(uuid())
  exameId    String
  nome       String
  valor      String
  unidade    String?
  referencia String?
  createdAt  DateTime @default(now())
  exame      Exame    @relation(fields: [exameId], references: [id], onDelete: Cascade)
}

model AnexoConsulta {
  id          String    @id @default(uuid())
  nomeArquivo String
  urlArquivo  String
  tipo        TipoAnexo
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  consultaId  String
  consulta    Consultas @relation(fields: [consultaId], references: [id], onDelete: Cascade)
}

model Medicamento {
  id               String             @id @default(uuid())
  nome             String
  principioAtivo   String?
  linkBula         String?
  posologia        String?
  forma            String?            // Comprimido, Cápsula, etc.
  tipo             TipoMedicamento
  dataInicio       DateTime
  dataFim          DateTime?
  status           StatusMedicamento
  estoque          Int?               @default(0)
  quantidadeCaixa  Int?
  quantidadeDose   Float?
  frequenciaNumero Int?
  frequenciaTipo   FrequenciaTipo?

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  userId           String
  usuario          User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  profissionalId   String?
  profissional     Profissional?      @relation(fields: [profissionalId], references: [id], onDelete: SetNull)

  consultaId       String?
  consulta         Consultas?         @relation(fields: [consultaId], references: [id], onDelete: SetNull)

  condicaoSaudeId  String?            // RENAMED
  condicaoSaude    CondicaoSaude?     @relation(fields: [condicaoSaudeId], references: [id], onDelete: SetNull) // RENAMED
}
