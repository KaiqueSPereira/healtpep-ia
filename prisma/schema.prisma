generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  Authenticator Authenticator[]
  consultas     Consultas[]
  endereco      Endereco[]
  sessions      Session[]
  tratamentos   Tratamento[]
  exames        Exame[]
  dadosSaude    DadosSaude?
  historicoPeso PesoHistorico[] 
}

model DadosSaude {
  id             String    @id @default(uuid())
  userId         String    @unique
  CNS            String?   
  tipoSanguineo  String?   
  sexo           String?   
  dataNascimento String?   
  altura         String?   
   usuario   User     @relation(fields: [userId], references: [id])
}

model PesoHistorico {
  id        String   @id @default(uuid())
  peso      String
  data      String
  userId    String
  usuario   User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Consultas {
  id             String          @id @default(uuid())
  data           DateTime 
  motivo         String 
  tipodeexame    String?
  tipo           Consultatype
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userId         String
  profissionalId String        ?
  unidadeId      String?
  profissional   Profissional  ? @relation(fields: [profissionalId], references: [id])
  unidade        UnidadeDeSaude? @relation(fields: [unidadeId], references: [id])
  usuario        User            @relation(fields: [userId], references: [id])
  Exame          Exame[]
  Anotacoes      Anotacoes[]
  Tratamento     Tratamento[]
}
model Anotacoes {
  id           String          @id @default(uuid())
  consultaId   String
  anotacao     String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  consulta     Consultas      @relation(fields: [consultaId], references: [id])
}


model Endereco {
  id           String          @id @default(uuid())
  CEP          String
  numero       Int
  rua          String
  bairro       String
  municipio    String
  UF           String
  nome         String
  userId       String?
  unidadeId    String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  usuario      User?           @relation(fields: [userId], references: [id])
  unidadeSaude UnidadeDeSaude?
}

model Profissional {
  id            String           @id @default(uuid())
  nome          String
  especialidade String
  NumClasse     String           @unique
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  consultas     Consultas[]
  tratamentos   Tratamento[]     @relation("ProfissionalTratamentos")
  unidades      UnidadeDeSaude[] @relation("ProfissionalUnidades")
  exames        Exame[]
}

model Tratamento {
  id             String       @id @default(uuid())
  nome           String
  profissionalId String
  userId         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  exames         Exame[]
  consultas      Consultas[]
  profissional   Profissional @relation("ProfissionalTratamentos", fields: [profissionalId], references: [id])
  usuario        User         @relation(fields: [userId], references: [id])
}

model UnidadeDeSaude {
  id            String         @id @default(uuid())
  nome          String
  tipo          String?
  telefone      String?
  enderecoId    String?        @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  consultas     Consultas[]
  endereco      Endereco?      @relation(fields: [enderecoId], references: [id])
  profissionais Profissional[] @relation("ProfissionalUnidades")
  exames        Exame[]
}

enum Consultatype {
  Rotina
  Exame
  Emergencia
  Retorno
  Tratamento
}

model Exame {
  id             String           @id @default(uuid())
  nome           String
  nomeArquivo    String?
  dataExame      DateTime
  arquivoExame   Bytes?
  anotacao       String?
  userId         String
  profissionalId String?
  consultaId     String?
  unidadesId     String?
  tratamentoId   String?
  tipo           String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt


  tratamento    Tratamento?      @relation(fields: [tratamentoId], references: [id])
  usuario        User             @relation(fields: [userId], references: [id])
  profissional   Profissional?     @relation(fields: [profissionalId], references: [id])
  consulta       Consultas?       @relation(fields: [consultaId], references: [id])
  unidades       UnidadeDeSaude?  @relation(fields: [unidadesId], references: [id])
  resultados     ResultadoExame[] // nova relação
}

model ResultadoExame {
  id           String  @id @default(uuid())
  exameId      String
  nome         String
  valor        String
  unidade      String?
  referencia   String?
  createdAt    DateTime         @default(now())

  exame        Exame   @relation(fields: [exameId], references: [id])
}



