// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  CNS           BigInt?             @unique
  accounts      Account[]
  sessions      Session[]
  consultas     Consultas[]
  endereco      Endereco[]
  tratamentos   Tratamento[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Consultas {
  id              String          @id @default(uuid())
  data            DateTime
  queixas         String
  tratamento      String?
  tipodeexame     String?
  tipo            Consultatype
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          String
  profissionalId  String
  unidadeId       String?

  usuario         User            @relation(fields: [userId], references: [id])
  profissional    Profissional    @relation(fields: [profissionalId], references: [id])
  unidade         UnidadeDeSaude? @relation(fields: [unidadeId], references: [id], onDelete: SetNull)
}

enum Consultatype {
  Rotina
  Exame
  Emergencia
}

model Endereco {
  id        String   @id @default(uuid())
  CEP       String
  numero    Int
  rua       String
  bairro    String
  municipio String
  UF        String
  nome      String
  userId    String?
  unidadeId String?

  usuario   User?            @relation(fields: [userId], references: [id])
   unidadeSaude  UnidadeDeSaude? // Relacionamento inverso (1:1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profissional {
  id            String          @id @default(uuid())
  nome          String
  especialidade String
  NumClasse     String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  tratamentos   Tratamento[]    @relation("ProfissionalTratamentos")
  consultas     Consultas[]
  unidades      UnidadeDeSaude[] @relation("ProfissionalUnidades")
}

model Tratamento {
  id            String         @id @default(uuid())
  nome          String
  profissionalId String
  userId        String

  profissional  Profissional   @relation(fields: [profissionalId], references: [id], name: "ProfissionalTratamentos")
  usuario       User           @relation(fields: [userId], references: [id])

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model UnidadeDeSaude {
  id            String          @id @default(uuid())
  nome          String
  tipo          String?
 enderecoId    String?         @unique // Cada unidade tem um único endereço
  
  endereco      Endereco?       @relation(fields: [enderecoId], references: [id])
  consultas     Consultas[]
  profissionais Profissional[] @relation("ProfissionalUnidades")

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}
